/**
 * Funções em JavaScript - Anotações completas
 *
 * Funções são blocos de código reutilizáveis, chamados a qualquer momento.
 * 
 * Formas de declarar:
 */

// 1️⃣ Função nomeada
function saudacao() {
    console.log("Olá!");
}
saudacao();

// 2️⃣ Função anônima (sem nome, atribuída a variável)
const saudacao2 = function() {
    console.log("Olá de novo!");
};
saudacao2();

// 3️⃣ Arrow Function (sintaxe curta)
const saudacao3 = () => console.log("Olá Arrow!");
saudacao3();

/*
- Arrow function também pode ter várias linhas, mas usa chaves e return:
*/
const saudacao4 = () => {
    console.log("Linha 1");
    console.log("Linha 2");
    return "Terminou";
};
console.log(saudacao4());

/**
 * Diferenças importantes entre função normal e arrow function:
 * 
 * 1️⃣ THIS
 * - Função normal cria seu próprio this
 * - Arrow function herda o this do contexto onde foi criada
 * 
 * 2️⃣ ARGUMENTS
 * - Função normal tem o objeto arguments
 * - Arrow function não tem arguments
 * 
 * 3️⃣ CONSTRUTOR
 * - Função normal pode ser usada com new
 * - Arrow function não pode ser usada como construtor
 * 
 * 4️⃣ HOISTING
 * - Função normal sofre hoisting completo (pode chamar antes da linha de declaração)
 * - Arrow function atribuída a variável NÃO sofre hoisting
 */

/*
Exemplo de arguments
-----------------------
*/
function soma() {
    let total = 0;
    for (let valor of arguments) {
        total += valor;
    }
    return total;
}
console.log(soma(1, 2, 3, 4)); // 10

// Arrow function não tem arguments
// const somaArrow = () => { console.log(arguments); } // ERRO

/*
Funções como Objetos de Primeira Classe
----------------------------------------
Em JavaScript, funções são tratadas como objetos:
- podem ser passadas como argumento
- podem ser retornadas
- podem ser atribuídas a variáveis ou propriedades de objetos
- podem ter propriedades próprias
*/

// Exemplo de função como método (propriedade de objeto)
const pessoa = {
    falar: function() {
        console.log("Oi!");
    }
};
pessoa.falar();

// Exemplo de função com propriedade própria
function contarChamadas() {
    contarChamadas.count++;
    console.log("Função chamada!");
}
contarChamadas.count = 0;
contarChamadas();
console.log(contarChamadas.count); // 1

/*
Função Autoexecutável (IIFE)
-----------------------------
Executa assim que definida, evitando poluir o escopo global
*/
(function(msg) {
    console.log(msg);
})("Olá, IIFE!");


/*
Callback
--------
Uma função passada como argumento de outra função e chamada lá dentro
*/
function executar(callback) {
    console.log("Executando...");
    callback();
}
executar(() => console.log("Callback chamado!"));


/*
HOISTING
----------
"içamento" — as declarações são movidas para o topo do escopo.
- funções declaradas com function são içadas por completo
- var é içado mas inicializado como undefined
- let e const são içados, mas ficam em zona morta (não podem ser usados antes)
- arrow function atribuída a variável não sofre hoisting
*/

// Exemplo de hoisting de função tradicional
digaOi();
function digaOi() {
    console.log("Oi hoisting!");
}

// Exemplo de hoisting com var
console.log(a); // undefined
var a = 5;

// let/const
// console.log(b); // erro
let b = 10;

// arrow function não sofre hoisting
// saudacao5(); // erro
const saudacao5 = () => console.log("Oi!");

// resumo final
/**
 * ✔ Funções são blocos reutilizáveis
 * ✔ Podem ser nomeadas, anônimas ou arrow
 * ✔ Podem armazenar propriedades
 * ✔ Podem ser passadas/retornadas de outras funções
 * ✔ Podem ser autoexecutadas (IIFE)
 * ✔ Funções tradicionais têm arguments
 * ✔ São objetos de primeira classe no JS
 * ✔ Hoisting funciona diferente dependendo do tipo
 */
